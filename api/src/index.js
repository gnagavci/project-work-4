import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { getPool } from './db.js';
import { publishToQueue } from './mq.js';

dotenv.config();

const app = express();
const port = 3000;

app.use(cors({
  origin: process.env.CORS_ORIGIN || 'http://localhost:5173'
}));
app.use(express.json());

// Create new simulation
app.post('/api/simulations', async (req, res) => {
  try {
    const { name, runs, params } = req.body;
    const pool = await getPool();
    
    // Insert with UUID() generated by MySQL
    const [result] = await pool.execute(
      'INSERT INTO simulations (id, name, runs, params, status) VALUES (UUID(), ?, ?, CAST(? AS JSON), ?)',
      [name, runs, JSON.stringify(params), 'queued']
    );
    
    // Get the created simulation to get the UUID
    const [rows] = await pool.execute(
      'SELECT * FROM simulations WHERE name = ? AND runs = ? ORDER BY created_at DESC LIMIT 1',
      [name, runs]
    );
    
    const simulation = rows[0];
    
    // Publish to queue
    await publishToQueue('simulations', {
      simulationId: simulation.id,
      name: simulation.name,
      runs: simulation.runs,
      params: JSON.parse(simulation.params)
    });
    
    res.json(simulation);
  } catch (error) {
    console.error('Error creating simulation:', error);
    res.status(500).json({ error: 'Failed to create simulation' });
  }
});

// Get all simulations (last 20)
app.get('/api/simulations', async (req, res) => {
  try {
    const pool = await getPool();
    const [rows] = await pool.execute(
      'SELECT id, name, status, created_at, result FROM simulations ORDER BY created_at DESC LIMIT 20'
    );
    
    // Parse JSON fields
    const simulations = rows.map(row => ({
      ...row,
      result: typeof row.result === 'string' ? JSON.parse(row.result) : row.result
    }));
    
    res.json(simulations);
  } catch (error) {
    console.error('Error fetching simulations:', error);
    res.status(500).json({ error: 'Failed to fetch simulations' });
  }
});

// Get single simulation
app.get('/api/simulations/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const pool = await getPool();
    const [rows] = await pool.execute(
      'SELECT * FROM simulations WHERE id = ?',
      [id]
    );
    
    if (rows.length === 0) {
      return res.status(404).json({ error: 'Simulation not found' });
    }
    
    const simulation = rows[0];
    // Parse JSON fields
    simulation.params = typeof simulation.params === 'string' ? JSON.parse(simulation.params) : simulation.params;
    simulation.result = typeof simulation.result === 'string' ? JSON.parse(simulation.result) : simulation.result;
    
    res.json(simulation);
  } catch (error) {
    console.error('Error fetching simulation:', error);
    res.status(500).json({ error: 'Failed to fetch simulation' });
  }
});

app.listen(port, '0.0.0.0', () => {
  console.log(`API server running on port ${port}`);
});